#include <cstdint>

#define HASH_SIZE 66327167
#define R 52006237

#define EXACT 3
#define LOWER 2
#define UPPER 1

const uint64_t pr_dice[6] = {
    7599062739365386682uLL, 11481955082670349321uLL, 11115295453737707136uLL, 18000179042295191669uLL, 9546036818974288331uLL, 4197467292196354930uLL 
};

typedef struct node{
    uint64_t key1;
    uint64_t key2;
    int dice;
    int depth;
    int flag;
    bool valid;
    std::pair<double, int>value;
}node;

extern node hashtable[2][HASH_SIZE];
extern uint64_t debug_total;
extern uint64_t debug_hit;
extern uint64_t debug_collision;

void __init_hash_at_start(){
    fprintf(stderr, "INITIALIZE TIME!!!!\n");
    for(int i = 0;i < 2;i++){
        for(int j = 0;j < HASH_SIZE;j++){
            hashtable[i][j].key1 = 0;
            hashtable[i][j].key2 = 0;
            hashtable[i][j].dice = 0;
            hashtable[i][j].flag = 0;
            hashtable[i][j].depth = 0;
            hashtable[i][j].valid = false;
            hashtable[i][j].value.first =  0;
            hashtable[i][j].value.second = 0;
        }
    }
}

inline bool isset_flag(const int flag, int options ){
    return (flag == options);
}
inline int _h1(const uint64_t key){
    return key % HASH_SIZE;
}
inline int _h2(const uint64_t key){
    uint64_t res = R - key;
    if( res <= 0 ){
        res +=  HASH_SIZE; 
    }
    return res % HASH_SIZE;
}

inline int _h(const uint64_t key, const int i){
    return (_h1(key) + i * _h2(key)) % HASH_SIZE;
}

// Return -1 if not found, otherwise index
int lookup_entry(const uint64_t key1, const uint64_t key2, const int dice, const int color ){
    const uint64_t key = (key1 ^ key2) ^ pr_dice[dice];
    debug_total++;
    for(int i = 1;i <= 7;i++){
        const int index = _h(key, i);
        if( hashtable[color][index].valid && hashtable[color][index].key1 == key1 && hashtable[color][index].key2 == key2 && hashtable[color][index].dice == dice ){
            debug_hit++;
            return index;
        }
    }
    return -1;
}

void update_entry(const int index, const uint64_t key1, const uint64_t key2, const int dice, const int depth, const int flag, const std::pair<double, int>value, const int color){
    if( index != -1 ){
        assert( hashtable[color][index].valid && hashtable[color][index].key1 == key1 && hashtable[color][index].key2 && hashtable[color][index].dice );
        hashtable[color][index].depth   =   depth;
        hashtable[color][index].flag    =   flag;
        hashtable[color][index].value.first = value.first;
        hashtable[color][index].value.second = value.second;
    }
    else{
        const uint64_t key = (key1 ^ key2) ^ pr_dice[dice];
        int victim = -1;
        int victim_depth = -1;
        bool found_invalid = false;
        for(int i = 1 ;i <= 7;i++){
            const int index =_h(key, i);
            if( !hashtable[color][index].valid ){
                found_invalid = true;
                victim = index;
                break;
            }
            if( victim == -1 ){
                victim = index;
                victim_depth = hashtable[color][index].depth;
            }
            else if( victim_depth > hashtable[color][index].depth ){
                victim = index;
                victim_depth = hashtable[color][index].depth;
            }
        }
        if( found_invalid ){
            hashtable[color][victim].key1 = key1;
            hashtable[color][victim].key2 = key2;
            hashtable[color][victim].dice = dice;
            hashtable[color][victim].depth = depth;
            hashtable[color][victim].flag = flag;
            hashtable[color][victim].value.first = value.first;
            hashtable[color][victim].value.second = value.second;
            hashtable[color][victim].valid = true;
        }
        else{
            debug_collision++;
            if( victim_depth < depth ){
                hashtable[color][victim].key1 = key1;
                hashtable[color][victim].key2 = key2;
                hashtable[color][victim].dice = dice;
                hashtable[color][victim].depth = depth;
                hashtable[color][victim].flag = flag;
                hashtable[color][victim].value.first = value.first;
                hashtable[color][victim].value.second = value.second;
                hashtable[color][victim].valid = true;
            }
        }
    }
}



// pr_cube[color][cube_index][cube_position];
const uint64_t pr_cube[2][6][25] = {
    {
        {
            7517841346178358842uLL, 8092468556574852515uLL, 4413634012135044774uLL, 8984518434641323440uLL, 7842802069945162399uLL, 2556503072873895651uLL, 9206471006302975706uLL, 1743851470085575075uLL, 1620640240024228470uLL, 7065586082233999999uLL, 643165631914691924uLL, 1442786340371926543uLL, 1044461978543240108uLL, 2938210651813105277uLL, 7207453867696883909uLL, 6964455653744099275uLL, 8304399010072949653uLL, 5762492588830708528uLL, 3956236514105939073uLL, 3626005215061964137uLL, 3471592762941622984uLL, 4034522506121223747uLL, 2102681472225058468uLL, 3722371942803883844uLL, 7123612703599280970uLL
        },
        {
            5349128891914333408uLL, 7170909267326807461uLL, 8806325011406588430uLL, 8819120294479109463uLL, 4809561068697582675uLL, 3727798478254244826uLL, 3646498603592139471uLL, 8206360423501078310uLL, 6131076381439467477uLL, 4954259122724020989uLL, 7193841361748921343uLL, 160066683547505026uLL, 521750965923711862uLL, 939599829664915558uLL, 5819409030817015823uLL, 4865279761858680399uLL, 7118110687528802399uLL, 3128133178558531541uLL, 6342423617437602763uLL, 6431335301101695415uLL, 1997000361596565641uLL, 7670221190291041583uLL, 2888140429996298441uLL, 1099182908560464066uLL, 5736784065651884683uLL
        }, 
        {
            3225547573626360910uLL, 5464201458489383163uLL, 8575669961347496112uLL, 8582633545032238193uLL, 214604062261823453uLL, 6555380759677843590uLL, 1198664653124310918uLL, 1553477786542747916uLL, 2878423916845722621uLL, 1399853834693383673uLL, 9222701864297290947uLL, 2020052033523878573uLL, 9191115809026756779uLL, 2442289037620148118uLL, 8830262989044037354uLL, 498263896801563300uLL, 6131162185689522598uLL, 2870397226351171463uLL, 8173181806265844100uLL, 1710177811086516897uLL, 6774055452160256545uLL, 927643626183438546uLL, 594154418956281087uLL, 4824306156162194794uLL, 731101182231046115uLL
        }, 
        {
            5209211437531134893uLL, 8835770297786329496uLL, 2279517761431212319uLL, 661302527311480719uLL, 3590745316401410321uLL, 3525696452458897151uLL, 7613057828473736312uLL, 6070751495195056758uLL, 80462141427814130uLL, 4341693043718757437uLL, 8484885995096184361uLL, 8557418603890728430uLL, 4875172716853211211uLL, 511747008304558385uLL, 1734831909143564238uLL, 2786165453398073067uLL, 5993973934429631291uLL, 1358207032936907577uLL, 2040107062337749372uLL, 3473909399327567714uLL, 8473821774572333001uLL, 2121971127889392313uLL, 8721507363011583345uLL, 6614943562611946192uLL, 6396607034487314781uLL
        }, 
        {
            5083215230400611002uLL, 5205997735756025411uLL, 3457708359426153902uLL, 2694515933624346656uLL, 839909154935997933uLL, 1883210697482847965uLL, 2283464068698878924uLL, 8316956849636632606uLL, 3595553368340679709uLL, 4732802364652338949uLL, 4358520883398443177uLL, 962532893898825748uLL, 5341227939331899157uLL, 7996484246081960032uLL, 493800364784715131uLL, 6490899322767497594uLL, 6913932177374147879uLL, 2472646786365358350uLL, 3142805691215315919uLL, 6946980788285899330uLL, 6855186462994925271uLL, 6295864893445374149uLL, 9069779496677087185uLL, 6730915332414566205uLL, 3384405389991704972uLL
        }, 
        {
            6530570866562000490uLL, 176639319461581669uLL, 4944952214986649829uLL, 65046748436838934uLL, 4100647344569305600uLL, 6903178145949604645uLL, 1106085237230820406uLL, 3695677792439531112uLL, 3032625199268434416uLL, 4592801474880568172uLL, 1347376437169333611uLL, 8608319643778691200uLL, 2453105540118614194uLL, 7409266432832053691uLL, 3118424548800026726uLL, 4054624452794762533uLL, 3032934670465654031uLL, 3179106260879847694uLL, 1679354989535686546uLL, 6448058876556153078uLL, 1910083363126163543uLL, 7285634738776248740uLL, 2114089319197438852uLL, 6602013078689239876uLL, 6443846177066761618uLL
        }
    },
    {
        {
            195853179194358115uLL, 6845449473046000579uLL, 6496853997911166484uLL, 5549568995878604241uLL, 911955774975022800uLL, 2974078794269498927uLL, 3704779079704452330uLL, 5341037776013739582uLL, 1803473864149669433uLL, 6480177435099538309uLL, 8862382296306035552uLL, 3278486946766701497uLL, 6805680922065956482uLL, 293007095657754583uLL, 554725382206203342uLL, 2966027709207525056uLL, 8542909690081404338uLL, 6910694985346324312uLL, 3550974981398074931uLL, 4856145328291189174uLL, 7809872137523694799uLL, 8647040608887318890uLL, 8569168502837602853uLL, 8425998923574130534uLL, 9198257017045317253uLL
        }, 
        {
            8780256929383311655uLL, 4159968152680944255uLL, 217515256382262530uLL, 1240028624770552823uLL, 1735102475343402914uLL, 8192559371183104244uLL, 1911146788646104565uLL, 7537771718810592669uLL, 6484421215627043988uLL, 9018754037041223904uLL, 5567765188526124563uLL, 1196165916405705877uLL, 5039800103622291553uLL, 5657142643072537588uLL, 6899412873107843561uLL, 101885363472554468uLL, 7188691598867503983uLL, 6704858703965795288uLL, 7395295840224288716uLL, 5020018656760914793uLL, 5484048041995361117uLL, 30473190834746225uLL, 3718646466113808865uLL, 1043043753261727484uLL, 5561057098626191853uLL
        }, 
        {
            5092613204462691978uLL, 4170389006083741347uLL, 6364282397490640538uLL, 2443009526164880312uLL, 4888107243574094953uLL, 3085309394069838980uLL, 9172217646603233279uLL, 5111404899067354122uLL, 6356054258285164682uLL, 5422853887771626048uLL, 1816942174350854094uLL, 898504244110134348uLL, 7120557608079887452uLL, 4420786390782836413uLL, 379006158780234206uLL, 115680684242770019uLL, 8171658907110164882uLL, 5481006326037959144uLL, 5511401479957504797uLL, 599731481521473694uLL, 367957803106747530uLL, 1382452370178349089uLL, 2020755856099354509uLL, 8075097640073284988uLL, 4250485239633273525uLL
        }, 
        {
            6454897881381184302uLL, 55713759579065591uLL, 6241537200377222859uLL, 1439751157073214150uLL, 3206625945264710884uLL, 5840328530085873364uLL, 5016185493479885229uLL, 1511126420123268533uLL, 4565421808859700672uLL, 6557512917127411485uLL, 8178886847955596470uLL, 5706290021585890875uLL, 1330985402427778399uLL, 6034313305343404960uLL, 1384308384475493526uLL, 2046919266531092966uLL, 4966789105992481593uLL, 6894635293466391386uLL, 6744007533788387472uLL, 1901505065374473335uLL, 7019056446585575330uLL, 7899436228208697311uLL, 209379808527018987uLL, 603026066093003023uLL, 8992875209683742299uLL
        }, 
        {
            4224095647737193838uLL, 4067686091167781000uLL, 4430792314388541380uLL, 7338469137486339631uLL, 3905769555318564207uLL, 7747326767479416592uLL, 7830830872029145951uLL, 7711245766016967723uLL, 5525610076125034551uLL, 8690272452513525989uLL, 309108663140355238uLL, 1051293901942511390uLL, 7089187597612352560uLL, 801345437930430808uLL, 6941905421653617273uLL, 4135288037374958554uLL, 2171968791094006389uLL, 3822859037385670997uLL, 7628998656488659866uLL, 8444583468563431293uLL, 219685451698962547uLL, 2867939531285212618uLL, 852281577661809150uLL, 1251141844864287626uLL, 813485989326033313uLL
        }, 
        {
            7029485291027711652uLL, 7075399085461693827uLL, 8777068912602348567uLL, 1416006108375696671uLL, 8117777799526822642uLL, 4902656369843898787uLL, 5396611605704220392uLL, 6574528252626088127uLL, 3143953814437639600uLL, 2295022573175695239uLL, 6222567840924327999uLL, 3928362910664166241uLL, 6441671211435313065uLL, 5850655757711349960uLL, 2693260484244643174uLL, 6541872519370907886uLL, 3610084190764387515uLL, 3620800596865415490uLL, 6417074414472633750uLL, 252949961614523822uLL, 426342795553462650uLL, 8305105078667047700uLL, 195451224943031574uLL, 2328751105293752341uLL, 2359226311417815269uLL
        }
    }
};